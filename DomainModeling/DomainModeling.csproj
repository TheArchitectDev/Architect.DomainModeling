<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net6.0;net5.0</TargetFrameworks>
		<AssemblyName>Architect.DomainModeling</AssemblyName>
		<RootNamespace>Architect.DomainModeling</RootNamespace>
		<Nullable>Enable</Nullable>
		<ImplicitUsings>Enable</ImplicitUsings>
		<LangVersion>10</LangVersion>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
		<IsTrimmable>True</IsTrimmable>
	</PropertyGroup>

	<PropertyGroup>
		<VersionPrefix>2.0.0</VersionPrefix>
		<Description>
A complete Domain-Driven Design (DDD) toolset for implementing domain models, including base types and source generators.

https://github.com/TheArchitectDev/Architect.DomainModeling

Release notes:

2.0.0:
- BREAKING: Generated DummyBuilders now use UTC datetimes for generated defaults and for interpreting datetime strings.
- Semi-breaking: Generated types no longer add [Serializable] attribute, since there would be no way to remove it.
- Fixed a compile-time bug where the source generator for ValueObjects would create non-compiling equality/comparisons for properties of types created solely by source generators.
- Fixed a potential bug in Entity&lt;TId&gt;, where entities of different types could be considered equal if they used the same TId (which they should not).
- Identity and WrapperValueObject&lt;TValue&gt; types now honor the underlying type's nullability in ToString().
- Added some missing nullability attributes.
- Identity types generated for Entity&lt;TId, TIdPrimitive&gt; now have a summary.
- Identity types wrapping a non-nullable string now explain the non-nullness for default struct instances, in summaries for ToString(), Value, and convert-to-string operators.
- Added support for trimming.
- Minor performance optimizations.

1.0.3:
- Improved performance by using incremental generators.
- Made it easier to navigate into the right file, thanks to a comment just before the generated type definition.
- Generated source now uses the common .g.cs suffix.
- DummyBuilderGenerator: WrapperValueObject&lt;string&gt; and IIdentity&lt;string&gt; constructor params now get a string value equal to the param name instead of the type name (e.g. "FirstName" and "LastName" instead of "ProperName" and "ProperName").
- Fixed a compile-time bug where [Wrapper]ValueObject inheritance combined with the IIdentity interface would cause an unwarranted warning.
- Fixed a compile-time bug where the source generator would fail to acknowledge a type with the SourceGeneratedAttribute on one partial and the required base type on another.
- Fixed a compile-time bug where the source generator would crash if the partial to be extended already consisted of multiple partials.
- Fixed a compile-time bug where the DummyBuilder source generator would crash if it encountered a constructor taking a parameter that is a source-generated IIdentity.
- Reduced the need for duplicate type names to require a uniquefier in the generated source name.
		</Description>
		<Copyright>The Architect</Copyright>
		<Company>The Architect</Company>
		<Authors>TheArchitectDev, Timovzl</Authors>
		<RepositoryUrl>https://github.com/TheArchitectDev/Architect.DomainModeling</RepositoryUrl>
		<RepositoryType>Git</RepositoryType>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageTags>DDD, Domain-Driven Design, Entity, ValueObject, value, object, DomainModeling, domain, modeling, SourceGenerator, source, generator</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\LICENSE">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\DomainModeling.Generator\DomainModeling.Generator.csproj" Pack="false">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
			<OutputItemType>Content</OutputItemType>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<!-- Package the generator in the analyzer directory of the nuget package -->
		<None Remove="$(OutputPath)/net6.0/$(AssemblyName).Generator.dll" />
		<None Include="$(OutputPath)/net6.0/$(AssemblyName).Generator.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
	</ItemGroup>

</Project>
