<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0;net7.0;net6.0</TargetFrameworks>
		<CheckEolTargetFramework>False</CheckEolTargetFramework>
		<AssemblyName>Architect.DomainModeling</AssemblyName>
		<RootNamespace>Architect.DomainModeling</RootNamespace>
		<Nullable>Enable</Nullable>
		<ImplicitUsings>Enable</ImplicitUsings>
		<LangVersion>11</LangVersion>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
		<IsTrimmable>True</IsTrimmable>
	</PropertyGroup>

	<ItemGroup>
		<InternalsVisibleTo Include="$(AssemblyName).Tests" />
	</ItemGroup>

	<PropertyGroup>
		<VersionPrefix>3.0.0</VersionPrefix>
		<Description>
A complete Domain-Driven Design (DDD) toolset for implementing domain models, including base types and source generators.

https://github.com/TheArchitectDev/Architect.DomainModeling

Release notes:

3.0.0:

- BREAKING: Platform support: Dropped support for .NET 5.0 (EOL), to reduce precompiler directives and different code paths.
- BREAKING: Marker attributes: [SourceGenerated] attribute is refactored into [Entity], [ValueObject], [WrapperValueObject&lt;TValue&gt;], [IdentityValueObject&lt;T&gt;], [DomainEvent], or [DummyBuilder&lt;TModel&gt;]. The obsolete marking helps with migrating.
- BREAKING: DummyBuilder base class: The DummyBuilder&lt;TModel, TModelBuilder&gt; base class is deprecated in favor of the new [DummyBuilder&lt;TModel&gt;] attribute. The obsolete marking helps migrate easily.
- BREAKING: Private ctors: Source-generated subclasses of ValueObject now generate a private default constructor, for logic-free deserialization. This may break deserialization if properties lack an init/set. A new analyzer warns about such properties.
- BREAKING: Init properties: A new analyzer warns if a WrapperValueObject's Value property lacks an init/set, because logic-free deserialization then requires a workaround to set the field.
- BREAKING: ISerializableDomainObject interface: Wrapper value objects and identities now require the new ISerializableDomainObject&lt;TModel, TValue&gt; interface (added automatically if source generation is used). A new analyzer warns if the interface is missing.
- Feature: Custom inheritance: Source generation of concrete classes that have custom base classes is now easy to achieve, with the marker attributes identifying each concrete type to generate for.
- Feature: Optional inheritance: For source-generated value objects, wrapper value objects, and identities, it is no longer required to inherit or implement anything, as the generated code will take care of this.
- Feature: DomainObjectSerializer (.NET 7+): The new DomainObjectSerializer type can be used to (de)serialize identities and wrapper value objects without running any domain logic (such as parameterized constructors), and customizable per type.
- Feature: Entity Framework mappings (.NET 7+): If Entity Framework is used, mappings by convention (that also bypass constructors) can be generated. Override DbContext.ConfigureConventions() and call the generated ConfigureDomainModelConventions() extension method. Its action parameter allows all identities, wrapper value objects, entities, and/or domain events to be mapped, even in a trimmer-safe way.
- Feature: Miscellaneous mappings: Other third party components can similarly map domain objects, by using the generated static IdentityDomainModelConfigurator, WrapperValueObjectDomainModelConfigurator, EntityDomainModelConfigurator, and DomainEventDomainModelConfigurator.
- Feature: Marker attributes: The new marker attributes can also be used without source generation, if the 'partial' keyword is omitted, allowing manually implemented types to also participate in mappings.
- Feature: Type flexibility: The new marker attributes can be applied more liberally to classes, structs, and record types, although source generation may not be available for each combination (resulting in a warning).
- Feature: Record struct identities: Explicitly declared identity types now support "record struct", even with source generation, thus allowing their curly braces to be omitted: `public partial record struct GeneratedId;`
- Feature: ValueObject validation helpers: Added ValueObject.ContainsNonPrintableCharactersOrDoubleQuotes(), a common validation requirement for proper names.
- Feature: Formattable and parsable interfaces (.NET 7+): Generated identities and wrapper value objects now implement IFormattable, IParsable&lt;TSelf&gt;, ISpanFormattable, and ISpanParsable&lt;TSelf&gt;, recursing into the wrapped type's implementation.
- Feature: UTF-8 formattable and parsable interfaces (.NET 8+): Generated identities and wrapper value objects now implement IUtf8SpanFormattable and IUtf8SpanParsable&lt;TSelf&gt;, recursing into the wrapped type's implementation.
- Enhancement: JSON converters (.NET 7+): All generated JSON converters now pass through the new Serialize() and Deserialize() methods, for customizable and logic-free (de)serialization. (Ex. domain rule change: New e-mail addresses must have at least a 4-char username, without invalidating existing shorter ones, which exist as JSON blobs in database.)
- Enhancement: JSON converters (.NET 7+): ReadAsPropertyName() and WriteAsPropertyName() in generated JSON converters now recurse into the wrapped type's converter and also pass through the new Serialize() and Deserialize() methods, for customizable and logic-free (de)serialization.
- Bug fix: IDE stability: Fixed a compile-time bug that could cause some of the IDE's features to crash, such as certain analyzers.
- Minor feature: Additional interfaces: IEntity and IWrapperValueObject&lt;TValue&gt; interfaces are now available.
- Minor enhancement: Better dummy builders: Generated dummy builders, when creating dummy strings for constructor parameters named "value", now prefer the parent constructor parameter's name instead of the parameter's type name, for more informative values.

2.0.1:
- Fixed a bug where arrays in (Wrapper)ValueObjects would trip the generator.

2.0.0:
- BREAKING: Generated DummyBuilders now use UTC datetimes for generated defaults and for interpreting datetime strings.
- Semi-breaking: Generated types no longer add [Serializable] attribute, since there would be no way to remove it.
- Generated types are now easier to read, using ?-based nullables instead of attributes.
- Identity and WrapperValueObject&lt;TValue&gt; types now honor the underlying type's nullability in ToString().
- Identity and WrapperValueObject&lt;TValue&gt; types' generated System.Text.Json serializers now implement ReadAsPropertyName() and WriteAsPropertyName(), enabling serialization of such types when they are used as dictionary keys (only in .NET 7 and up).
- DummyBuilderGenerator: WrapperValueObject&lt;string&gt; and IIdentity&lt;string&gt; constructor params now get a string value equal to the param name instead of the type name (e.g. "FirstName" and "LastName" instead of "ProperName" and "ProperName").
- Added some missing nullable annotations.
- IIdentity&lt;T&gt; now has an explicit notnull constraint (whereas before this was only indirectly enforced by its IEquatable&lt;T&gt; interface).
- Identity types now serialize additional large numeric types as string, to avoid JavaScript overflows: UInt128 and Int128.
- Identity types generated for Entity&lt;TId, TIdPrimitive&gt; now have a summary.
- Identity types wrapping a non-nullable string now explain the non-nullness for default struct instances, in summaries for ToString(), Value, and convert-to-string operators.
- Identity types: Fixed a bug where string representations of numeric IDs could contain meaningless decimal places, e.g. when a decimal was internally represented as 1.0.
- Identity types: Fixed a bug in the generated JSON converters for IIdentity&lt;decimal&gt;, where an incorrect ArgumentNullException or NullReferenceException could be thrown instead of the expected JsonException/JsonSerializationException.
- Fixed a compile-time bug where the source generator for ValueObjects would create non-compiling equality/comparison for properties of types created solely by source generators.
- Fixed a potential bug in Entity&lt;TId&gt;, where entities of different types could be considered equal if they used the same TId (even though the latter is not advisable).
- Added support for trimming.
- Minor performance optimizations.

1.0.3:
- Improved performance by using incremental generators.
- Made it easier to navigate into the right file, thanks to a comment just before the generated type definition.
- Generated source now uses the common .g.cs suffix.
- Fixed a compile-time bug where [Wrapper]ValueObject inheritance combined with the IIdentity interface would cause an unwarranted warning.
- Fixed a compile-time bug where the source generator would fail to acknowledge a type with the SourceGeneratedAttribute on one partial and the required base type on another.
- Fixed a compile-time bug where the source generator would crash if the partial to be extended already consisted of multiple partials.
- Fixed a compile-time bug where the DummyBuilder source generator would crash if it encountered a constructor taking a parameter that is a source-generated IIdentity.
- Reduced the need for duplicate type names to require a uniquefier in the generated source name.
		</Description>
		<Copyright>The Architect</Copyright>
		<Company>The Architect</Company>
		<Authors>TheArchitectDev, Timovzl</Authors>
		<RepositoryUrl>https://github.com/TheArchitectDev/Architect.DomainModeling</RepositoryUrl>
		<RepositoryType>Git</RepositoryType>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageTags>DDD, Domain-Driven Design, Entity, ValueObject, value, object, DomainModeling, domain, modeling, SourceGenerator, source, generator</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\LICENSE">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\DomainModeling.Generator\DomainModeling.Generator.csproj" Pack="false">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
			<OutputItemType>Content</OutputItemType>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<!-- Package the generator in the analyzer directory of the nuget package -->
		<None Remove="$(OutputPath)/net6.0/$(AssemblyName).Generator.dll" />
		<None Include="$(OutputPath)/net6.0/$(AssemblyName).Generator.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
	</ItemGroup>

</Project>
