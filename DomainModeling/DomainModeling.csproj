<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0;net7.0;net6.0</TargetFrameworks>
		<CheckEolTargetFramework>False</CheckEolTargetFramework>
		<AssemblyName>Architect.DomainModeling</AssemblyName>
		<RootNamespace>Architect.DomainModeling</RootNamespace>
		<Nullable>Enable</Nullable>
		<ImplicitUsings>Enable</ImplicitUsings>
		<LangVersion>11</LangVersion>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
		<IsTrimmable>True</IsTrimmable>
	</PropertyGroup>

	<ItemGroup>
		<InternalsVisibleTo Include="$(AssemblyName).Tests" />
	</ItemGroup>

	<PropertyGroup>
		<VersionPrefix>3.0.1</VersionPrefix>
		<Description>
A complete Domain-Driven Design (DDD) toolset for implementing domain models, including base types and source generators.

https://github.com/TheArchitectDev/Architect.DomainModeling

Release notes:

3.0.0:

- BREAKING: Platform support: Dropped support for .NET 5.0 (EOL).
- BREAKING: Marker attributes: [SourceGenerated] attribute is refactored into [Entity], [ValueObject], [WrapperValueObject&lt;TValue&gt;], etc. Obsolete marking helps with migrating.
- BREAKING: DummyBuilder base class: The DummyBuilder&lt;TModel, TModelBuilder&gt; base class is deprecated in favor of the new [DummyBuilder&lt;TModel&gt;] attribute. Obsolete marking helps with migrating.
- BREAKING: Private ctors: Source-generated ValueObject types now generate a private default ctor with [JsonConstructor], for logic-free deserialization. This may break deserialization if properties lack an init/set. Analyzer included.
- BREAKING: Init properties: A new analyzer warns if a WrapperValueObject's Value property lacks an init/set, because logic-free deserialization then requires a workaround.
- BREAKING: ISerializableDomainObject interface: Wrapper value objects and identities now require the new ISerializableDomainObject&lt;TModel, TValue&gt; interface (generated automatically).
- Feature: Custom inheritance: Source generation with custom base classes is now easy, with marker attributes identifying the concrete types.
- Feature: Optional inheritance: For source-generated value objects, wrappers, and identities, the base type or interface is generated and can be omitted.
- Feature: DomainObjectSerializer (.NET 7+): The new DomainObjectSerializer type can be used to (de)serialize identities and wrappers without running any domain logic (such as parameterized ctors), and customizable per type.
- Feature: Entity Framework mappings (.NET 7+): If Entity Framework is used, mappings by convention (that also bypass ctors) can be generated. Override DbContext.ConfigureConventions() and call ConfigureDomainModelConventions(). Its action param allows all identities, wrapper value objects, entities, and/or domain events to be mapped, even in a trimmer-safe way.
- Feature: Miscellaneous mappings: Other third party components can similarly map domain objects. See the readme.
- Feature: Marker attributes: Non-partial types with the new marker attributes skip source generation, but can still participate in mappings.
- Feature: Record struct identities: Explicitly declared identity types now support "record struct", allowing their curly braces to be omitted: `public partial record struct GeneratedId;`
- Feature: ValueObject validation helpers: Added ValueObject.ContainsNonPrintableCharactersOrDoubleQuotes(), a common validation requirement for proper names.
- Feature: Formattable and parsable interfaces (.NET 7+): Generated identities and wrappers now implement IFormattable, IParsable&lt;TSelf&gt;, ISpanFormattable, and ISpanParsable&lt;TSelf&gt;, recursing into the wrapped type's implementation.
- Feature: UTF-8 formattable and parsable interfaces (.NET 8+): Generated identities and wrappers now implement IUtf8SpanFormattable and IUtf8SpanParsable&lt;TSelf&gt;, recursing into the wrapped type's implementation.
- Enhancement: JSON converters (.NET 7+): All generated JSON converters now pass through the new Serialize() and Deserialize() methods, for customizable and logic-free (de)serialization.
- Enhancement: JSON converters (.NET 7+): ReadAsPropertyName() and WriteAsPropertyName() in generated JSON converters now recurse into the wrapped type's converter and also pass through the new Serialize() and Deserialize() methods.
- Bug fix: IDE stability: Fixed a compile-time bug that could cause some of the IDE's features to crash, such as certain analyzers.
- Minor feature: Additional interfaces: IEntity and IWrapperValueObject&lt;TValue&gt; interfaces are now available.
		</Description>
		<Copyright>The Architect</Copyright>
		<Company>The Architect</Company>
		<Authors>TheArchitectDev, Timovzl</Authors>
		<RepositoryUrl>https://github.com/TheArchitectDev/Architect.DomainModeling</RepositoryUrl>
		<RepositoryType>Git</RepositoryType>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageTags>DDD, Domain-Driven Design, Entity, ValueObject, value, object, DomainModeling, domain, modeling, SourceGenerator, source, generator</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\LICENSE">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\DomainModeling.Generator\DomainModeling.Generator.csproj" Pack="false">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
			<OutputItemType>Content</OutputItemType>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<!-- Package the generator in the analyzer directory of the nuget package -->
		<None Remove="$(OutputPath)/net6.0/$(AssemblyName).Generator.dll" />
		<None Include="$(OutputPath)/net6.0/$(AssemblyName).Generator.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
	</ItemGroup>

</Project>
